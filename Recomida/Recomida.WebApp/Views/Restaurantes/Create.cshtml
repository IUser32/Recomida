@model Recomida.WebApp.Models.Context.Restaurantes

@{
    ViewBag.Title = "Create";
}
<style>
    #map {
        height: 250px;
        width: 100%;
    }
</style>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">

        <div class="col-md-8 col-md-offset-2">
            <div class="box box-info">
                <div class="box-header with-border">
                    <h3 class="box-title">Crear Nuevo Tipo de Restaurante</h3>
                </div>
                <!-- /.box-header -->
                <!-- form start -->
                <form class="form-horizontal">
                    <div class="box-body">
                        <input type="hidden" name="Longitud" id="Longitud" value="" />
                        <input type="hidden" name="Latitud" id="Latitud" value="" />
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.TipoRestauranteID, "Tipo de Restaurante", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("TipoRestauranteID", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TipoRestauranteID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.TipoComidaID, "Tipo de Comida", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("TipoComidaID", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TipoComidaID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Ubicacion.Pais, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Ubicacion.Pais, "Pais", "Pais", new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Ubicacion.Pais, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Ubicacion.Ciudad, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Ubicacion.Ciudad, "Ciudad", "Ciudad", new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Ubicacion.Ciudad, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Ubicacion.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Ubicacion.Direccion, "Direccion", "Direccion", new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Ubicacion.Direccion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div id="map"></div>
                            </div>
                            
                            <div class="box-footer">
                                <div class="form-group">
                                    <div class="text-center">
                                        <input type="submit" value="Registrar" class="btn btn-success" />
                                    </div>
                                </div>
                            </div>
                            <!-- /.box-footer -->
                            </div>
                        </div>
                </form>
            </div>

        </div>
    </div>
}
<div>
    @Html.ActionLink("Volver a la lista", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDLov3DZ5oTZUglO6OQ_-pDvIMZ_FsIJ_8&callback=initMap">
</script>
<script>
    function initMap() {
        var uluru = { lat: 18.450931761859625, lng: -69.92768883705139 };
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 18,
            center: uluru
        });
        var marker = new google.maps.Marker({
            draggable: true,
            position: uluru,
            map: map
        });
        google.maps.event.addListener(marker, 'click', function (event) {
            document.getElementById("Latitud").value = this.getPosition().lat();
            document.getElementById("Longitud").value = this.getPosition().lng();
        });
        google.maps.event.addListener(marker, 'dragend', function (event) {
            document.getElementById("Latitud").value = this.getPosition().lat();
            document.getElementById("Longitud").value = this.getPosition().lng();
        });
        Longitud.value = uluru.lng;
        Latitud.value = uluru.lat;
    }
</script>

